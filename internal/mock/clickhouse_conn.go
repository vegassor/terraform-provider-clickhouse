// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ClickHouse/clickhouse-go/v2/lib/driver (interfaces: Conn,Rows,Row,Batch,BatchColumn,ColumnType)

package mock

import (
	context "context"
	reflect "reflect"

	driver "github.com/ClickHouse/clickhouse-go/v2/lib/driver"
	proto "github.com/ClickHouse/clickhouse-go/v2/lib/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// AsyncInsert mocks base method.
func (m *MockConn) AsyncInsert(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncInsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncInsert indicates an expected call of AsyncInsert.
func (mr *MockConnMockRecorder) AsyncInsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncInsert", reflect.TypeOf((*MockConn)(nil).AsyncInsert), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// Contributors mocks base method.
func (m *MockConn) Contributors() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contributors")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Contributors indicates an expected call of Contributors.
func (mr *MockConnMockRecorder) Contributors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contributors", reflect.TypeOf((*MockConn)(nil).Contributors))
}

// Exec mocks base method.
func (m *MockConn) Exec(arg0 context.Context, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockConnMockRecorder) Exec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockConn)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockConn) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockConnMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockConn)(nil).Ping), arg0)
}

// PrepareBatch mocks base method.
func (m *MockConn) PrepareBatch(arg0 context.Context, arg1 string) (driver.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareBatch", arg0, arg1)
	ret0, _ := ret[0].(driver.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareBatch indicates an expected call of PrepareBatch.
func (mr *MockConnMockRecorder) PrepareBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareBatch", reflect.TypeOf((*MockConn)(nil).PrepareBatch), arg0, arg1)
}

// Query mocks base method.
func (m *MockConn) Query(arg0 context.Context, arg1 string, arg2 ...interface{}) (driver.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockConnMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockConn)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockConn) QueryRow(arg0 context.Context, arg1 string, arg2 ...interface{}) driver.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(driver.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockConnMockRecorder) QueryRow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockConn)(nil).QueryRow), varargs...)
}

// Select mocks base method.
func (m *MockConn) Select(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockConnMockRecorder) Select(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockConn)(nil).Select), varargs...)
}

// ServerVersion mocks base method.
func (m *MockConn) ServerVersion() (*proto.ServerHandshake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*proto.ServerHandshake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockConnMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockConn)(nil).ServerVersion))
}

// Stats mocks base method.
func (m *MockConn) Stats() driver.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(driver.Stats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockConnMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockConn)(nil).Stats))
}

// MockRows is a mock of Rows interface.
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
}

// MockRowsMockRecorder is the mock recorder for MockRows.
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance.
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRows) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// ColumnTypes mocks base method.
func (m *MockRows) ColumnTypes() []driver.ColumnType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypes")
	ret0, _ := ret[0].([]driver.ColumnType)
	return ret0
}

// ColumnTypes indicates an expected call of ColumnTypes.
func (mr *MockRowsMockRecorder) ColumnTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypes", reflect.TypeOf((*MockRows)(nil).ColumnTypes))
}

// Columns mocks base method.
func (m *MockRows) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns.
func (mr *MockRowsMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRows)(nil).Columns))
}

// Err mocks base method.
func (m *MockRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Next mocks base method.
func (m *MockRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// Scan mocks base method.
func (m *MockRows) Scan(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), arg0...)
}

// ScanStruct mocks base method.
func (m *MockRows) ScanStruct(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanStruct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanStruct indicates an expected call of ScanStruct.
func (mr *MockRowsMockRecorder) ScanStruct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStruct", reflect.TypeOf((*MockRows)(nil).ScanStruct), arg0)
}

// Totals mocks base method.
func (m *MockRows) Totals(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Totals", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Totals indicates an expected call of Totals.
func (mr *MockRowsMockRecorder) Totals(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Totals", reflect.TypeOf((*MockRows)(nil).Totals), arg0...)
}

// MockRow is a mock of Row interface.
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
}

// MockRowMockRecorder is the mock recorder for MockRow.
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance.
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockRow) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRow)(nil).Err))
}

// Scan mocks base method.
func (m *MockRow) Scan(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRow)(nil).Scan), arg0...)
}

// ScanStruct mocks base method.
func (m *MockRow) ScanStruct(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanStruct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanStruct indicates an expected call of ScanStruct.
func (mr *MockRowMockRecorder) ScanStruct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStruct", reflect.TypeOf((*MockRow)(nil).ScanStruct), arg0)
}

// MockBatch is a mock of Batch interface.
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch.
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance.
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockBatch) Abort() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort")
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockBatchMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockBatch)(nil).Abort))
}

// Append mocks base method.
func (m *MockBatch) Append(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockBatchMockRecorder) Append(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockBatch)(nil).Append), arg0...)
}

// AppendStruct mocks base method.
func (m *MockBatch) AppendStruct(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendStruct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendStruct indicates an expected call of AppendStruct.
func (mr *MockBatchMockRecorder) AppendStruct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendStruct", reflect.TypeOf((*MockBatch)(nil).AppendStruct), arg0)
}

// Column mocks base method.
func (m *MockBatch) Column(arg0 int) driver.BatchColumn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Column", arg0)
	ret0, _ := ret[0].(driver.BatchColumn)
	return ret0
}

// Column indicates an expected call of Column.
func (mr *MockBatchMockRecorder) Column(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Column", reflect.TypeOf((*MockBatch)(nil).Column), arg0)
}

// Flush mocks base method.
func (m *MockBatch) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockBatchMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockBatch)(nil).Flush))
}

// IsSent mocks base method.
func (m *MockBatch) IsSent() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSent")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSent indicates an expected call of IsSent.
func (mr *MockBatchMockRecorder) IsSent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSent", reflect.TypeOf((*MockBatch)(nil).IsSent))
}

// Send mocks base method.
func (m *MockBatch) Send() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBatchMockRecorder) Send() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBatch)(nil).Send))
}

// MockBatchColumn is a mock of BatchColumn interface.
type MockBatchColumn struct {
	ctrl     *gomock.Controller
	recorder *MockBatchColumnMockRecorder
}

// MockBatchColumnMockRecorder is the mock recorder for MockBatchColumn.
type MockBatchColumnMockRecorder struct {
	mock *MockBatchColumn
}

// NewMockBatchColumn creates a new mock instance.
func NewMockBatchColumn(ctrl *gomock.Controller) *MockBatchColumn {
	mock := &MockBatchColumn{ctrl: ctrl}
	mock.recorder = &MockBatchColumnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchColumn) EXPECT() *MockBatchColumnMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockBatchColumn) Append(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockBatchColumnMockRecorder) Append(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockBatchColumn)(nil).Append), arg0)
}

// AppendRow mocks base method.
func (m *MockBatchColumn) AppendRow(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendRow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendRow indicates an expected call of AppendRow.
func (mr *MockBatchColumnMockRecorder) AppendRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRow", reflect.TypeOf((*MockBatchColumn)(nil).AppendRow), arg0)
}

// MockColumnType is a mock of ColumnType interface.
type MockColumnType struct {
	ctrl     *gomock.Controller
	recorder *MockColumnTypeMockRecorder
}

// MockColumnTypeMockRecorder is the mock recorder for MockColumnType.
type MockColumnTypeMockRecorder struct {
	mock *MockColumnType
}

// NewMockColumnType creates a new mock instance.
func NewMockColumnType(ctrl *gomock.Controller) *MockColumnType {
	mock := &MockColumnType{ctrl: ctrl}
	mock.recorder = &MockColumnTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColumnType) EXPECT() *MockColumnTypeMockRecorder {
	return m.recorder
}

// DatabaseTypeName mocks base method.
func (m *MockColumnType) DatabaseTypeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseTypeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabaseTypeName indicates an expected call of DatabaseTypeName.
func (mr *MockColumnTypeMockRecorder) DatabaseTypeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseTypeName", reflect.TypeOf((*MockColumnType)(nil).DatabaseTypeName))
}

// Name mocks base method.
func (m *MockColumnType) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockColumnTypeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockColumnType)(nil).Name))
}

// Nullable mocks base method.
func (m *MockColumnType) Nullable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nullable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Nullable indicates an expected call of Nullable.
func (mr *MockColumnTypeMockRecorder) Nullable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nullable", reflect.TypeOf((*MockColumnType)(nil).Nullable))
}

// ScanType mocks base method.
func (m *MockColumnType) ScanType() reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ScanType indicates an expected call of ScanType.
func (mr *MockColumnTypeMockRecorder) ScanType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanType", reflect.TypeOf((*MockColumnType)(nil).ScanType))
}
